import * as core from '@actions/core'
import {context, getOctokit} from '@actions/github'
import {ESLint} from 'eslint'
import {readFileSync} from 'fs'
import {argv} from 'process'

const run = async (): Promise<void> => {
  try {
    const parsed = JSON.parse(argv[2]) as {
      resultArr: ESLint.LintResult[]
      formatted: string
    }
    const resultArr = parsed.resultArr
    const formatted = parsed.formatted
    const octokit = getOctokit(argv[3])
    const approveMode = argv[4]

    const pullNumbers: number[] = (
      await octokit.pulls.list({
        ...context.repo,
        state: 'open'
      })
    ).data
      .filter(pull => pull.head.sha === context.sha)
      .map(pull => pull.number)

    for (const pull_number of pullNumbers) {
      const oldReviews = (
        await octokit.pulls.listReviews({
          ...context.repo,
          pull_number
        })
      ).data.filter(
        review =>
          review.user?.id === 41898282 &&
          (review.body.startsWith(
            '[comment]: <> (Generated by ESLint PR review. View: https://github.com/marketplace/actions/eslint-pr-review)\n'
          ) ||
            review.state === 'APPROVED')
      )
      if (oldReviews.length) {
        const oldReview = oldReviews[oldReviews.length - 1]

        if (oldReview.state === 'CHANGES_REQUESTED') {
          await octokit.pulls.updateReview({
            ...context.repo,
            pull_number,
            review_id: oldReview.id,
            body: `${oldReview.body} - :warning: Outdated :warning:`
          })

          const oldCommentIds = (
            await octokit.pulls.listCommentsForReview({
              ...context.repo,
              review_id: oldReview.id,
              pull_number
            })
          ).data.map(comment => comment.id)

          for (const oldCommentId of oldCommentIds) {
            await octokit.pulls.deleteReviewComment({
              ...context.repo,
              comment_id: oldCommentId
            })
          }
        }
      }

      const filesChanged = (
        await octokit.pulls.listFiles({
          ...context.repo,
          pull_number
        })
      ).data.map(file => file.filename)

      const allComments: {
        path: string
        body: string
        start_line?: number
        line: number
      }[] = []
      for (const file of resultArr) {
        for (const message of file.messages) {
          if (message.fix) {
            const normalFileContent = readFileSync(file.filePath).toString()
            const normalLines = normalFileContent.split('\n')
            const fixedFileContent = `${normalFileContent.substr(
              0,
              message.fix.range[0]
            )}${message.fix.text}${normalFileContent.substr(
              message.fix.range[1]
            )}`
            const fixedLines = fixedFileContent.split('\n')
            let startLine = 0
            while (normalLines[startLine] === fixedLines[startLine]) {
              startLine++
            }
            const difference = normalLines.length - fixedLines.length
            let line = normalLines.length
            while (normalLines[line] === fixedLines[line - difference]) {
              line--
            }

            const newLines = fixedLines.slice(startLine, line - difference + 1)

            startLine++
            line++
            allComments.push({
              path: file.filePath.replace(`${process.cwd()}/`, ''),
              body: `${message.message}\n\`\`\`suggestion\n${newLines.join(
                '\n'
              )}\n\`\`\``,
              start_line: startLine === line ? undefined : startLine,
              line
            })
          } else {
            allComments.push({
              path: file.filePath.replace(`${process.cwd()}/`, ''),
              body: message.message,
              start_line:
                message.line === message.endLine ? undefined : message.line,
              line: message.endLine as number
            })
          }
        }
      }
      const comments = []
      const bodyComments = new Map<
        string,
        {
          path: string
          body: string
          start_line?: number
          line: number
        }[]
      >()

      for (const comment of allComments) {
        if (filesChanged.includes(comment.path)) {
          comments.push(comment)
        } else {
          if (bodyComments.has(comment.path)) {
            bodyComments.get(comment.path)?.push(comment)
          } else {
            bodyComments.set(comment.path, [comment])
          }
        }
      }
      if (
        allComments.length ||
        !oldReviews.length ||
        (oldReviews.length &&
          oldReviews[oldReviews.length - 1].state === 'CHANGES_REQUESTED') ||
        approveMode === 'approve-always'
      ) {
        const review = await octokit.pulls.createReview({
          ...context.repo,
          pull_number,
          body: allComments.length
            ? `[comment]: < > (Generated by ESLint PR review. View: https://github.com/marketplace/actions/eslint-pr-review)\n## ${
                allComments.length
              } Problem(s) found${
                bodyComments.size
                  ? `\n${[...bodyComments.entries()]
                      .map(
                        ([path, commentArr]) =>
                          `### ${path}\n${commentArr
                            .map(
                              comment =>
                                `${
                                  comment.start_line === undefined
                                    ? `Line ${comment.line}:`
                                    : `From line ${comment.start_line} to ${comment.line}:`
                                }\n${comment.body}`
                            )
                            .join('\n---\n')}`
                      )
                      .join('\n')}`
                  : ''
              }`
            : undefined,
          comments,
          headers: {
            accept: 'application/vnd.github.v3+json'
          }
        })
        await octokit.pulls.submitReview({
          ...context.repo,
          event: allComments.length ? 'REQUEST_CHANGES' : 'APPROVE',
          pull_number,
          review_id: review.data.id
        })
      }
    }
    if (
      resultArr.reduce(
        (sum, result) => sum + result.errorCount + result.warningCount,
        0
      )
    ) {
      core.setFailed(formatted)
    }
  } catch (error) {
    core.setFailed(error.stack)
  }
}

run()
